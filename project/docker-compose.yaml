version: "3.9"

services:
  auth:
    build:
      context: ./microservices/auth/
      dockerfile: Dockerfile
    container_name: auth
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    environment:
      - AUTH_PORT=${AUTH_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
    networks:
      - e-administration
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  employment-office:
    build:
      context: ./microservices/employmentOffice/
      dockerfile: Dockerfile
    container_name: employment-office
    ports:
      - "${EMPLOYMENT_OFFICE_PORT}:${EMPLOYMENT_OFFICE_PORT}"
    environment:
      - EMPLOYMENT_OFFICE_PORT=${EMPLOYMENT_OFFICE_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
    networks:
      - e-administration
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  university:
    build:
      context: ./microservices/university/
      dockerfile: Dockerfile
    container_name: university
    ports:
      - "${UNIVERSITY_PORT}:${UNIVERSITY_PORT}"
    environment:
      - UNIVERSITY_PORT=${UNIVERSITY_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
    networks:
      - e-administration
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    command: ["postgres", "-c", "shared_preload_libraries=pg_trgm"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - e-administration
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - e-administration
    volumes:
      - ./migrations:/migrations
    command:
      [
        "-path",
        "/migrations",
        "-database",
        "postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable",
        "up",
      ]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_eadministration
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - e-administration
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  e-administration:
    driver: bridge
